#!/usr/bin/env bash

set -e
########################
# Author: Shinichi Okada
# Date: 2021-05-10
# Backpack for Laravel installer
###########################

# >>>>>>>> default variables >>>>>>>>>>
# set -u
# set defaults
version="0.5.4"
script_name=$(basename "$0")
all=""
script_dir=""
laravel_dir=""
# <<<<<<<< default variables <<<<<<<<<<

# >>>>>>>> argument >>>>>>>>>>>>>>>>>>
usage() {
    cat <<EOF
Name: 
=====
$script_name

Description: 
============
This script install all Backpack for Laravel modules.

Backpackforlaravel modules:
===========================
BackupManager, LogManager, Settings, PageManager, PermissionManager, MenuCrud, and  NewsCrud.

Requirement:
============
You must have Laravel installed and connected to a database.
gsed

Usage:
======
./$script_name [ -a | -all ] [ -d path | --dir path] [ -u | --uninstall ] [ -v | --version ] [ -h | --help ] 
    -d | --dir       Absolute path to Laravel project.          
    -a | --all       This will install all modules.
    -u | --uninstall Uninstall all modules.
    -v | --version   Script version.
    -h | --help      Show help.

Examples:
=========
    cd to $script_name directory
    $ cd /path/to/$script_name

    Install all modules
    $ ./$script_name -a -d /path/to/laravel/project

    Install modules one by one
    $ ./$script_name -d /path/to/laravel/project

    Uninstall all modules
    $ ./$script_name -u -d /path/to/laravel/project

    Get help
    $ ./$script_name -h

    Get version
    $ ./$script_name -v

Exit error status:
==================
    4:  Error

EOF
    exit 2
}

while (($# > 0)); do
    case "$1" in
    -d | --dir)
        if [[ -z $2 ]]; then
            echo "Specify the directory."
            exit 1
        fi
        laravel_dir=$2
        firstChar=${laravel_dir:0:1}
        # echo $laravel_dir
        # echo $firstChar
        if [[ "$firstChar" != "/" ]]; then
            echo "The directory must be an absolute path."
            exit
        fi 
        # laravel_dir=$2
        shift 2
        ;;
    -v | --version)
        echo "$version"
        exit 0
        ;;
    -a | --all)
        all=true
        shift 1
        ;;
    -u | --uninstall)
        uninstall=true
        shift 1
        ;;
    -h | --help | *)
        usage
        exit 0
        ;;
    esac
done
# <<<<<<<< argument <<<<<<<<<<<<<<<<<<

# >>>>>>>> functions >>>>>>>>>>>>>>>>>
# Usage: import "mylib"
# check if $(which backpack_install) is a symlink 
which_install=$(which backpack_install)

if [[ -L $which_install ]]; then
# check if installation is Homebrew
# if so use script_dir=/opt/homebrew/Cellar/backpack_install/${version}/bin
    if [[ "$which_install" == *"homebrew"* ]]; then
        script_dir="/opt/homebrew/Cellar/backpack_install/${version}/bin"
    else
        link=$(readlink ${which_install})
        script_dir=$(dirname ${link})
    fi
else
    script_dir="./"
fi


function import() {
    local file="${script_dir}/lib/${1}"
    if [ -f "${file}" ]; then
        # shellcheck disable=SC1090
        source "${file}"
    else
        echo "Error: Cannot find library at: ${file}"
        exit 1
    fi
}

# Usage: import "filename"
import "banners"
import "utils"
import "uninstall"
import "bp_crud"
import "bp_backupmanager"
import "bp_logmanager"
import "bp_settings"
import "bp_pagemanager"
import "bp_permissionmanager"
import "bp_menucrud"
import "bp_newscrud"
import "bp_filemanager"

#########################
# Globals: $vendor_dir, $laravel_dir
# Arguments: one of followings,
# crud, backupmanager, filemanager, generators, logmanager,
# menucrud, newscrud, pagemanager, permissionmanager, settings
# Outputs: Y or N
# Returns: 0 for success, 3 for fail
##########################
check_dir() {
    PACKAGE=""
    package_name=$1
    laravel_dir=$2
    script_dir=$3
    cd "$laravel_dir" || exit
    local dir_to_check=$laravel_dir/vendor/backpack/$package_name
    while [[ -z "$PACKAGE" ]]; do
        if [[ "${all}" = "true" ]]; then
            if [[ -d "$dir_to_check" ]]; then
                # if you have it ask if you want to overwrite
                read -rp "It seems you already installed $1 packages. Do you want to overwrite it? yes/y or no/n.   " PACKAGE
            else
                PACKAGE=Y
            fi
        else
            if [[ -d "$dir_to_check" ]]; then
                # if you have it ask if you want to overwrite
                read -rp "It seems you already installed $1 packages. Do you want to overwrite it? yes/y or no/n.   " PACKAGE
            else
                read -rp "Do you want to install ${1}? yes/y or no/n.   " PACKAGE
            fi
        fi
    done

    echo "$PACKAGE" | cut -c 1-1 | tr "[:lower:]" "[:upper:]"
}
# <<<<<<<< functions <<<<<<<<<<<<<<<<<

# >>>>>>> event functions >>>>>>>>>>>
# CTRL+C event handler
on_ctrl_c() {
    echo       # Set cursor to the next line of '^C'
    tput cnorm # show cursor. You need this if animation is used.
    echo "Terminated with Ctrl+C."
    echo "Removing backpack modules ..."
    uninstall_bp "$laravel_dir"
    exit 1 # Don't remove. Use a number (1-255) for error code.
}

# Put this line at the beginning of your script (after functions used by event handlers).
# Register CTRL+C event handler
trap on_ctrl_c SIGINT

# <<<<<<< event functions <<<<<<<<<<<

# >>>>>>> Check >>>>>>>>>>>>>>>>>>>>>
# cd to the project
cd "$laravel_dir" || exit 1

# if $uninstall is true run uninstall
if [[ "$uninstall" = true ]]; then
    # confirm if you are sure
    options=("Yes" "No") # 0 or 1
    inputChoice "Choose:" 0 "${options[@]}"
    choice=$?

    if [ "$choice" = 0 ]; then
        bannerColor "Uninstalling ..." "red" "*"
        uninstall_bp "$laravel_dir"
    else
        bannerColor "Try it again." "red" "*"
        exit 1
    fi
    exit 0
fi


# check commands
check_cmd gsed
check_cmd composer
check_cmd laravel

# Confirm if user updated the .env file especially APP_URL
read -rp "Have you updated .env file, like APP_URL, etc? yes/y or no/n   " ENV

env_ans=$(echo "$ENV" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")

if [ ! "$env_ans" = Y ]; then
    bannerColor "Update your .env file." "red" "*"
    exit 1
fi

# Confirm you are connected to DB
read -rp "Are you connected to DB? yes/y or no/n   " RUNNING

run_ans=$(echo "$RUNNING" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")

if [ ! "$run_ans" = Y ]; then
    bannerColor "You need to connect to DB and run Laravel." "red" "*"
    exit 1
fi

# <<<<<<< Check <<<<<<<<<<<<<<<<<<<<<

# >>>>>>>> main >>>>>>>>>>>>>>>>>>>>>>>>

# 1. Install Backpack Core packages
crud_ans=$(check_dir crud)
if [[ "$crud_ans" = Y ]]; then
    fn_crud "$laravel_dir"
fi

# 2. Install BackupManager
backup_ans=$(check_dir backupmanager "$laravel_dir" "$script_dir")
if [[ "$backup_ans" = Y ]]; then
    fn_backupmanager "$laravel_dir" "$script_dir"
fi

# 3. Install LogManager
log_ans=$(check_dir logmanager "$laravel_dir" "$script_dir")
if [[ "$log_ans" = Y ]]; then
    fn_logmanager "$laravel_dir" "$script_dir"
fi

# 4. Install Settings
setting_ans=$(check_dir settings "$laravel_dir" "$script_dir")
if [[ "$setting_ans" = Y ]]; then
    fn_settings "$laravel_dir"
fi

# 5. Install PageManager
page_ans=$(check_dir pagemanager "$laravel_dir" "$script_dir")
if [[ "$page_ans" = Y ]]; then
    fn_pagemanager "$laravel_dir" "$script_dir"
fi

# 6. Install PermissionManager
permission_ans=$(check_dir permissionmanager "$laravel_dir" "$script_dir")
if [[ "$permission_ans" = Y ]]; then
    fn_permissionmanager "$laravel_dir" "$script_dir"
fi

# 7. Install MenuCrud
menu_ans=$(check_dir menucrud "$laravel_dir" "$script_dir")
if [[ "$menu_ans" = Y ]]; then
    fn_menucrud "$laravel_dir"
fi

# 8. Install NewsCrud
news_ans=$(check_dir newscrud "$laravel_dir" "$script_dir")
if [[ "$news_ans" = Y ]]; then
    fn_newscrud "$laravel_dir"
fi

# 9. Install FileManager
file_ans=$(check_dir filemanager "$laravel_dir" "$script_dir")
if [[ "$file_ans" = Y ]]; then
    fn_filemanager "$laravel_dir"
fi

echo
bannerColor "Installation completed." "blue" "*"
echo
bannerColor "Happy Coding!" "magenta" "*"
exit 0
