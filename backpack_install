#!/usr/bin/env bash

########################
# Author: Shinichi Okada
# Date: 2021-05-10
# Backpack for Laravel installer
###########################

# >>>>>>>> default variables >>>>>>>>>>
# set defaults
version="v0.3.0"
script_name=$(basename "$0")
all=""
script_dir=$(pwd)
laravel_dir=""
vendor_dir="./vendor/backpack"
illuminate_dir="./vendor/laravel/framework/src/Illuminate"
# <<<<<<<< default variables <<<<<<<<<<

# >>>>>>> event functions >>>>>>>>>>>
# CTRL+C event handler
on_ctrl_c() {
    echo       # Set cursor to the next line of '^C'
    tput cnorm # show cursor. You need this if animation is used.
    echo "Terminated with Ctrl+C."
    echo "Removing backpack modules ..."
    composer remove backpack/crud
    composer remove backpack/backupmanager
    composer remove backpack/logmanager
    composer remove backpack/settings
    composer remove backpack/permissionmanager
    composer remove backpack/pagemanager
    composer remove backpack/menucrud
    composer remove backpack/newscrud
    composer remove backpack/filemanager
    exit 1 # Don't remove. Use a number (1-255) for error code.
}

# Put this line at the beginning of your script (after functions used by event handlers).
# Register CTRL+C event handler
trap on_ctrl_c SIGINT ERR

# <<<<<<< event functions <<<<<<<<<<<

# >>>>>>>> functions >>>>>>>>>>>>>>>>>
usage() {
    cat <<EOF
Name: 
=====
$script_name

Description: 
============
This script install all Backpack for Laravel modules.

Backpackforlaravel modules:
===========================
BackupManager, LogManager, Settings, PageManager, PermissionManager, MenuCrud, and  NewsCrud.

Requirement:
============
You must have Laravel installed and connected to a database.

Usage:
======
./$script_name [ -a | -all ] [ -d path ] 
    -a | --all      This will install all modules.
    -v | --version  Script version.
    -h | --help     Show help.

Examples:
=========
    cd to $script_name directory
    $ cd path/to/$script_name

    Then install all modules
    $ ./$script_name -a -d /path/to/laravel/project

    Or get help
    $ ./$script_name -h

    Or get version
    $ ./$script_name -v

Exit error status:
==================
    4:  Error

EOF
    exit 2
}

# <<<<<<<< functions <<<<<<<<<<<<<<<<<

# >>>>>>>> argument >>>>>>>>>>>>>>>>>>
# -a parameter to install all
while (($# > 0)); do
    case "$1" in
    -d | --dir)
        laravel_dir=$2
        shift 2
        ;;
    -v | --version)
        echo "$version"
        exit 0
        ;;
    -a | --all)
        all=true
        shift 1
        ;;
    -h | --help | *)
        usage
        exit 0
        ;;
    esac
done
# <<<<<<<< argument <<<<<<<<<<<<<<<<<<

# >>>>>>>> main >>>>>>>>>>>>>>>>>>>>>>>>
# Usage: import "mylib"
function import() {
    local file="./lib/${1}"
    if [ -f "${file}" ]; then
        source "${file}"
    else
        echo "Error: Cannot find library at: ${file}"
        exit 1
    fi
}

# Usage: import "filename"
import "bp_crud"
import "bp_backupmanager"
import "bp_logmanager"
import "bp_settings"
import "bp_pagemanager"
import "bp_permissionmanager"
import "bp_menucrud"
import "bp_newscrud"
import "bp_filemanager"

# if $laravel_dir is empty or doesn't exist. Exit with warning.
if [[ -z "${laravel_dir}" || ! -d "${laravel_dir}" ]]; then
    echo "You need to provide path to your Laravel project"
    exit 1
fi

# check if you have sed
if ! type sed &>/dev/null; then
    echo "You need to install sed."
    exit 1
fi

# cd to the project
cd "$laravel_dir" || exit 1

# check if /vendor/laravel/framework/src/Illuminate
if [[ ! -d "$illuminate_dir" ]]; then
    echo "You need to install Laravel."
    exit 1
fi

# Confirm if user updated the .env file especially APP_URL
read -rp "Have you updated .env file, like APP_URL, etc? yes/y or no/n   " ENV

env_ans=$(echo "$ENV" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")

if [ ! "$env_ans" = Y ]; then
    echo "Update your .env file."
    exit 1
fi
# Confirm you are connected to DB and Laravel is running
read -rp "Are you connected to DB and Laravel is running? y or n   " RUNNING

run_ans=$(echo "$RUNNING" | cut -c 1-1 | tr "[:lower:]" "[:upper:]")

if [ ! "$run_ans" = Y ]; then
    echo "You need to connect to DB and run Laravel."
    exit 1
fi

# if so grep const VERSION = '8.40';
# find if it is greater than 5
# laravelversion=$(grep VERSION ./vendor/laravel/framework/src/Illuminate/Foundation/Application.php)

# echo "$laravelversion"

############### functions ###########

#########################
# Globals: $vendor_dir, $laravel_dir
# Arguments: one of followings,
# crud, backupmanager, filemanager, generators, logmanager,
# menucrud, newscrud, pagemanager, permissionmanager, settings
# Outputs: Y or N
# Returns: 0 for success, 3 for fail
##########################
check_dir() {
    PACKAGE=""
    cd "$laravel_dir" "$script_dir" || exit
    local dir_to_check=$vendor_dir/$1
    while [[ -z "$PACKAGE" ]]; do
        if [[ "${all}" = "true" ]]; then
            if [[ -d "$dir_to_check" ]]; then
                # if you have it ask if you want to overwrite
                read -rp "It seems you already installed $1 packages. Do you want to overwrite it? yes/y or no/n.   " PACKAGE
            else
                PACKAGE=Y
            fi
        else
            if [[ -d "$dir_to_check" ]]; then
                # if you have it ask if you want to overwrite
                read -rp "It seems you already installed $1 packages. Do you want to overwrite it? yes/y or no/n.   " PACKAGE
            else
                read -rp "Do you want to install ${1}? yes/y or no/n.   " PACKAGE
            fi
        fi
    done

    echo "$PACKAGE" | cut -c 1-1 | tr "[:lower:]" "[:upper:]"
}

# if laravel version is greater than 5 it's ok

# check if .env file has DB_PASSWORD

echo "$laravel_dir"
# 1. Install Backpack Core packages

crud_ans=$(check_dir crud)
if [[ "$crud_ans" = Y ]]; then
    fn_crud "$laravel_dir"
fi

# 2. Install BackupManager
backup_ans=$(check_dir backupmanager)
if [[ "$backup_ans" = Y ]]; then
    fn_backupmanager "$laravel_dir" "$script_dir"
fi

# 3. Install LogManager
log_ans=$(check_dir logmanager)
if [[ "$log_ans" = Y ]]; then
    fn_logmanager "$laravel_dir" "$script_dir"
fi

# 4. Install Settings
setting_ans=$(check_dir settings)
if [[ "$setting_ans" = Y ]]; then
    fn_settings "$laravel_dir"
fi

# 5. Install PageManager
page_ans=$(check_dir pagemanager)
if [[ "$page_ans" = Y ]]; then
    fn_pagemanager "$laravel_dir" "$script_dir"
fi

# 6. Install PermissionManager
permission_ans=$(check_dir permissionmanager)
if [[ "$permission_ans" = Y ]]; then
    fn_permissionmanager "$laravel_dir"
fi

# 7. Install MenuCrud
menu_ans=$(check_dir menucrud)
if [[ "$menu_ans" = Y ]]; then
    fn_menucrud "$laravel_dir"
fi

# 8. Install NewsCrud
news_ans=$(check_dir newscrud)
if [[ "$news_ans" = Y ]]; then
    fn_newscrud "$laravel_dir"
fi

# 9. Install FileManager
file_ans=$(check_dir filemanager)
if [[ "$file_ans" = Y ]]; then
    fn_filemanager "$laravel_dir"
fi

echo
echo "Installation completed."
echo
echo "BackupManager [optional]: You need to configure them."
echo
echo "For PermissionManager to work, add the Spatie\Permission\Traits\HasRoles trait to your User model(s)"
echo
echo
echo "Happy Coding!"
exit 0
