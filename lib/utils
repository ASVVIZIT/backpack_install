#!/usr/bin/env bash

# shellman options
# Usage: options=("one" "two" "three"); inputChoice "Choose:" 1 "${options[@]}"; choice=$?; echo "${options[$choice]}"
function inputChoice() {
    echo "${1}"
    shift
    echo $(tput dim)-"Change option: [up/down], Select: [ENTER]" $(tput sgr0)
    local selected="${1}"
    shift

    ESC=$(echo -e "\033")
    cursor_blink_on() { tput cnorm; }
    cursor_blink_off() { tput civis; }
    cursor_to() { tput cup $(($1 - 1)); }
    print_option() { echo $(tput sgr0) "$1" $(tput sgr0); }
    print_selected() { echo $(tput rev) "$1" $(tput sgr0); }
    get_cursor_row() {
        IFS=';' read -sdR -p $'\E[6n' ROW COL
        echo ${ROW#*[}
    }
    key_input() {
        read -s -n3 key 2>/dev/null >&2
        [[ $key = $ESC[A ]] && echo up
        [[ $key = $ESC[B ]] && echo down
        [[ $key = "" ]] && echo enter
    }

    for opt; do echo; done

    local lastrow=$(get_cursor_row)
    local startrow=$(($lastrow - $#))
    trap "cursor_blink_on; echo; echo; exit" 2
    cursor_blink_off

    : selected:=0

    while true; do
        local idx=0
        for opt; do
            cursor_to $(($startrow + $idx))
            if [ ${idx} -eq ${selected} ]; then
                print_selected "${opt}"
            else
                print_option "${opt}"
            fi
            ((idx++))
        done

        case $(key_input) in
        enter) break ;;
        up)
            ((selected--))
            [ "${selected}" -lt 0 ] && selected=$(($# - 1))
            ;;
        down)
            ((selected++))
            [ "${selected}" -ge $# ] && selected=0
            ;;
        esac
    done

    cursor_to "${lastrow}"
    cursor_blink_on
    echo

    return "${selected}"
}

# Usage: options=("one" "two" "three");
# inputChoice "Choose:" 1 "${options[@]}";
# choice=$?; echo "${options[$choice]}"
# inputChoice "Choose:" 0 "${options[@]}"
# choice=$?
# echo "${options[$choice]}" selected

# all "${options[$choice]}"

check_cmd() {
    if [[ ! $(command -v "$1") ]]; then
        bannerColor "It seems like you don't have $1." "red" "*"
        bannerColor "Please install $1 or add the PATH to .zshrc or .bash_profile." "red" "*"
        exit 1
    fi
}

#########################
# Globals: $vendor_dir, $laravel_dir
# Arguments: one of followings,
# crud, backupmanager, filemanager, generators, logmanager,
# menucrud, newscrud, pagemanager, permissionmanager, settings
# Outputs: Y or N
# Returns: 0 for success, 3 for fail
##########################
check_dir() {
    PACKAGE=""
    package_name=$1
    laravel_dir=$2
    script_dir=$3
    cd "$laravel_dir" || exit
    local dir_to_check=$laravel_dir/vendor/backpack/$package_name
    while [[ -z "$PACKAGE" ]]; do
        if [[ "${all}" = "true" ]]; then
            if [[ -d "$dir_to_check" ]]; then
                # if you have it ask if you want to overwrite
                read -rp "It seems you already installed $1 packages. Do you want to overwrite it? yes/y or no/n.   " PACKAGE
            else
                PACKAGE=Y
            fi
        else
            if [[ -d "$dir_to_check" ]]; then
                # if you have it ask if you want to overwrite
                read -rp "It seems you already installed $1 packages. Do you want to overwrite it? yes/y or no/n.   " PACKAGE
            else
                read -rp "Do you want to install ${1}? yes/y or no/n.   " PACKAGE
            fi
        fi
    done

    echo "$PACKAGE" | cut -c 1-1 | tr "[:lower:]" "[:upper:]"
}
